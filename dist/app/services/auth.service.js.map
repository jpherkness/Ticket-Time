{"version":3,"sources":["../src/app/services/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAA2B,eAAe,CAAC,CAAA;AAC3C,yBAAuB,iBAAiB,CAAC,CAAA;AACzC,qBAA2B,SAAS,CAAC,CAAA;AACrC,uBAA+B,eAAe,CAAC,CAAA;AAG/C;IAIE,YAAoB,MAAc,EACd,IAAU;QADV,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAM;QAHtB,YAAO,GAAW,uCAAuC,CAAC;IAGlC,CAAC;IAEjC,uBAAuB;IAChB,KAAK,CAAC,KAAa,EAAE,QAAgB;QAC1C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,gBAAgB,KAAK,aAAa,QAAQ,EAAE,CAAC;aACvE,SAAS,CACR,GAAG;YACD,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjB,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,CAAC;QACH,CAAC,EACD,GAAG;YACD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAC3B,CAAC,CACF,CAAC;IACN,CAAC;IAEM,MAAM;QACX,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC1C,CAAC;IAEM,UAAU;QACf,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;IACtD,CAAC;IAEM,cAAc;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,EAAE,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,SAAS,EAAE,EAAE,CAAC;iBACjD,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;iBACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;QACtC,CAAC;QACD,MAAM,CAAC,eAAU,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEO,gBAAgB;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC9C,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,WAAW,CAAC,GAAa;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAG,CAAC;IACrB,CAAC;IAEO,WAAW,CAAC,GAAQ;QAC1B,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;AACH,CAAC;AA7DD;IAAC,iBAAU,EAAE;;eAAA;AACA,mBAAW,cA4DvB,CAAA","file":"app/services/auth.service.js","sourceRoot":"/source/","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\nimport { Http, Response } from '@angular/http';\n\n@Injectable()\nexport class AuthService {\n  \n  private baseUrl: string = 'https://ticket-time.herokuapp.com/api';\n  \n  constructor(private router: Router,\n              private http: Http){}\n  \n  // TODO: Refactor this.\n  public login(email: string, password: string) {\n    this.http.get(`${this.baseUrl}/auth/?email=${email}&password=${password}`)\n      .subscribe(\n        res => {\n          var user = this.extractData(res);\n          if (user.user_id) {\n            localStorage.setItem('auth_user_id', user.user_id);\n            this.router.navigate(['/home']);\n          } else {\n            this.router.navigate(['/login']);\n          }\n        },\n        err => {\n          console.log('Auth error')\n        }\n      );\n  }\n     \n  public logout() {\n    localStorage.removeItem('auth_user_id');\n  }\n  \n  public isLoggedIn() {\n    return localStorage.getItem('auth_user_id') != null;\n  }\n  \n  public getCurrentUser(): Observable<Object> {\n    if (this.isLoggedIn()) {\n      let id = this.getCurrentUserId();\n      return this.http.get(`${this.baseUrl}/user/${id}`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err)) \n    }\n    return Observable.empty();\n  }\n  \n  private getCurrentUserId(): string {\n    if (this.isLoggedIn()) {\n      let id = localStorage.getItem('auth_user_id');\n      return id;\n    }\n    return null;\n  }\n  \n  private extractData(res: Response) {\n    let body = res.json();\n    return body || { };\n  }\n  \n  private handleError(err: any) {\n    return Observable.throw(err);\n  }\n}"]}