{"version":3,"sources":["../src/app/services/api.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAAwD,eAAe,CAAC,CAAA;AACxE,qBAA2B,SAAS,CAAC,CAAA;AACrC,uBAAmC,eAAe,CAAC,CAAA;AAGnD;IAIE,YAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAF/B,YAAO,GAAW,uCAAuC,CAAC;IAExB,CAAC;IAEnC,SAAS;QACP,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,QAAQ,CAAC;aAC1C,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IAED,QAAQ,CAAC,EAAS;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,UAAU,EAAE,EAAE,CAAC;aAChD,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IAED,YAAY,CAAC,OAAe,EAAE,SAAiB,EAAE,OAAe;QAC9D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,wBAAwB,OAAO,eAAe,SAAS,aAAa,OAAO,EAAE,CAAC;aAC/G,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IAED,eAAe,CAAC,MAAc;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,0BAA0B,MAAM,EAAE,CAAC;aACpE,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IAED,WAAW,CAAC,UAAkB;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,0BAA0B,UAAU,EAAE,CAAC;aACxE,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IAEO,WAAW,CAAC,GAAa;QAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAG,CAAC;IACrB,CAAC;IAEO,WAAW,CAAC,GAAQ;QAC1B,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;AACH,CAAC;AA9CD;IAAC,iBAAU,EAAE;;cAAA;AACA,kBAAU,aA6CtB,CAAA","file":"app/services/api.service.js","sourceRoot":"/source/","sourcesContent":["import { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport { Injectable, Inject } from '@angular/core';\n\n@Injectable()\nexport class ApiService {\n     \n  baseUrl: string = 'https://ticket-time.herokuapp.com/api';\n  \n  constructor (private http: Http){ } \n     \n  getMovies(): Observable<Object[]> {\n    return this.http.get(`${this.baseUrl}/movie`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err))\n  }\n    \n  getMovie(id:number): Observable<Object[]> {\n    return this.http.get(`${this.baseUrl}/movie/${id}`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err))\n  }\n  \n  getShowtimes(movieId: number, startTime: string, endTime: string): Observable<Object[]> {\n    return this.http.get(`${this.baseUrl}/showtimes/?movie_id=${movieId}&start_time=${startTime}&end_time=${endTime}`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err))\n  }\n  \n  getReservations(userId: number): Observable<Object[]> {\n    return this.http.get(`${this.baseUrl}/reservations/?user_id=${userId}`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err))\n  }\n  \n  getShowtime(showtimeId: number): Observable<Object[]> {\n    return this.http.get(`${this.baseUrl}/showtime/?showtime_id=${showtimeId}`)\n      .map(res => this.extractData(res))\n      .catch(err => this.handleError(err))\n  }\n     \n  private extractData(res: Response) {\n    console.log(res);\n    let body = res.json();\n    return body || { };\n  }\n\n  private handleError(err: any) {\n    return Observable.throw(err);\n  }\n}"]}